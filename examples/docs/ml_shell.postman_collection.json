{
    "info": {
        "_postman_id": "01K79YAHJ7BR4E87VVTG8FNBZ3",
        "name": "Chapkit ML Shell - Language-Agnostic ML",
        "description": "Shell-based disease prediction ML service using external Python scripts for language-agnostic workflows.\n\n**Features:**\n- Model: LinearRegression (via external Python script)\n- Features: rainfall, mean_temperature\n- Target: disease_cases\n- Runner: ShellModelRunner (executes external scripts)\n- Assessment: Orange (shows promise, needs evaluation)\n- Special: Language-agnostic - can use Python, R, Julia, or any CLI tool\n\n**Architecture:**\nFastAPI App \u2192 ShellModelRunner \u2192 External Scripts (train_model.py, predict_model.py)\n\n**Quick Start:**\n```bash\nfastapi dev examples/ml_shell.py\n```\n\nService available at: http://127.0.0.1:8000",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "chapkit-ml-shell"
    },
    "item": [
        {
            "name": "1. Service Health & Info",
            "item": [
                {
                    "name": "Check Service Health",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/health",
                            "host": ["{{baseUrl}}"],
                            "path": ["health"]
                        },
                        "description": "Check service health status."
                    },
                    "response": []
                },
                {
                    "name": "View System Info",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/system",
                            "host": ["{{baseUrl}}"],
                            "path": ["system"]
                        },
                        "description": "Get platform and system information (Python version, OS, hostname, timezone)."
                    },
                    "response": [
                        {
                            "name": "System Info",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/system",
                                    "host": ["{{baseUrl}}"],
                                    "path": ["system"]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n  \"current_time\": \"2025-10-11T17:30:00Z\",\n  \"timezone\": \"CEST\",\n  \"python_version\": \"3.13.8\",\n  \"platform\": \"macOS-26.0.1-arm64-arm-64bit-Mach-O\",\n  \"hostname\": \"mlaptop.local\"\n}"
                        }
                    ]
                },
                {
                    "name": "View Service Metadata",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/info",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "info"]
                        },
                        "description": "Get ML service metadata including author, version, assessment status, and description."
                    },
                    "response": [
                        {
                            "name": "Service Metadata",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/api/v1/info",
                                    "host": ["{{baseUrl}}"],
                                    "path": ["api", "v1", "info"]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n  \"display_name\": \"Shell-Based Disease Prediction Service\",\n  \"version\": \"1.0.0\",\n  \"summary\": \"ML service using external scripts for train/predict\",\n  \"description\": \"Demonstrates language-agnostic ML workflows with file-based data interchange using Python scripts\",\n  \"author\": \"ML Engineering Team\",\n  \"author_note\": \"Language-agnostic approach allows integration with R, Julia, and other tools\",\n  \"author_assessed_status\": \"orange\",\n  \"contact_email\": \"mleng@example.com\"\n}"
                        }
                    ]
                },
                {
                    "name": "Get Config Schema",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/configs/$schema",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "configs", "$schema"]
                        },
                        "description": "Get schema for DiseaseConfig with min_samples and model_type fields."
                    },
                    "response": [
                        {
                            "name": "Config Schema",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/api/v1/configs/$schema",
                                    "host": ["{{baseUrl}}"],
                                    "path": ["api", "v1", "configs", "$schema"]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"min_samples\": {\n      \"type\": \"integer\",\n      \"default\": 3,\n      \"title\": \"Min Samples\"\n    },\n    \"model_type\": {\n      \"type\": \"string\",\n      \"default\": \"linear_regression\",\n      \"title\": \"Model Type\"\n    }\n  },\n  \"title\": \"DiseaseConfig\"\n}"
                        }
                    ]
                }
            ],
            "description": "Service health and metadata endpoints."
        },
        {
            "name": "2. Configuration Management",
            "item": [
                {
                    "name": "Create Configuration",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('config_id', response.id);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"shell_disease_model\",\n  \"data\": {\n    \"min_samples\": 3,\n    \"model_type\": \"linear_regression\"\n  }\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/configs",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "configs"]
                        },
                        "description": "Create configuration accessible by external scripts via config.json."
                    },
                    "response": []
                },
                {
                    "name": "List All Configs",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/configs",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "configs"]
                        },
                        "description": "List all configurations."
                    },
                    "response": []
                },
                {
                    "name": "Get Config by ID",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/configs/{{config_id}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "configs", "{{config_id}}"]
                        },
                        "description": "Retrieve specific configuration."
                    },
                    "response": []
                }
            ],
            "description": "Configuration management for external scripts."
        },
        {
            "name": "3. Model Training (External Script)",
            "item": [
                {
                    "name": "Train Model via External Script",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 200 || pm.response.code === 202) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('train_job_id', response.job_id);",
                                    "    pm.collectionVariables.set('model_artifact_id', response.model_artifact_id);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"config_id\": \"{{config_id}}\",\n  \"data\": {\n    \"columns\": [\n      \"rainfall\",\n      \"mean_temperature\",\n      \"humidity\",\n      \"disease_cases\"\n    ],\n    \"data\": [\n      [\n        100.5,\n        25.3,\n        75.05,\n        12\n      ],\n      [\n        85.2,\n        27.1,\n        73.52,\n        8\n      ],\n      [\n        120.8,\n        24.5,\n        77.08,\n        15\n      ],\n      [\n        95.3,\n        26.2,\n        74.53,\n        10\n      ],\n      [\n        110.0,\n        26.0,\n        76.0,\n        13\n      ]\n    ]\n  }\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ml/$train",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "ml", "$train"]
                        },
                        "description": "Submit training job that executes examples/scripts/train_model.py\n\n**Workflow:**\n1. Create temp directory: /tmp/chapkit_ml_train_XXXXX/\n2. Write config.json with model config\n3. Write data.csv with training data\n4. Execute: python train_model.py --config config.json --data data.csv --model model.pickle\n5. Read model.pickle and store in artifact\n6. Cleanup temp directory"
                    },
                    "response": []
                },
                {
                    "name": "Poll Training Job",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/jobs/{{train_job_id}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "jobs", "{{train_job_id}}"]
                        },
                        "description": "Poll training job status. Check server logs for script execution details."
                    },
                    "response": []
                },
                {
                    "name": "Get Trained Model Artifact",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}",
                            "host": ["{{baseUrl}}"],
                            "path": [
                                "api",
                                "v1",
                                "artifacts",
                                "{{model_artifact_id}}"
                            ]
                        },
                        "description": "Retrieve trained model artifact with metadata about script execution."
                    },
                    "response": [
                        {
                            "name": "Model Artifact",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/api/v1/artifacts/01JAABC789GHI345",
                                    "host": ["{{baseUrl}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "artifacts",
                                        "01JAABC789GHI345"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n  \"id\": \"01JAABC789GHI345\",\n  \"level\": 0,\n  \"data\": {\n    \"model_type\": \"sklearn.linear_model.LinearRegression\",\n    \"trained_via\": \"shell_script\",\n    \"script\": \"train_model.py\",\n    \"trained_at\": \"2025-10-11T17:31:05Z\"\n  }\n}"
                        }
                    ]
                }
            ],
            "description": "Training via external script execution."
        },
        {
            "name": "4. Predictions (External Script)",
            "item": [
                {
                    "name": "Make Predictions via External Script",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 200 || pm.response.code === 202) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('predict_job_id', response.job_id);",
                                    "    pm.collectionVariables.set('prediction_artifact_id', response.prediction_artifact_id);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"model_artifact_id\": \"{{model_artifact_id}}\",\n  \"historic\": {\n    \"columns\": [\n      \"rainfall\",\n      \"mean_temperature\",\n      \"humidity\"\n    ],\n    \"data\": []\n  },\n  \"future\": {\n    \"columns\": [\n      \"rainfall\",\n      \"mean_temperature\",\n      \"humidity\"\n    ],\n    \"data\": [\n      [\n        110.0,\n        26.0,\n        81.0\n      ],\n      [\n        90.0,\n        28.0,\n        79.0\n      ],\n      [\n        125.0,\n        24.0,\n        82.5\n      ]\n    ]\n  }\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ml/$predict",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "ml", "$predict"]
                        },
                        "description": "Submit prediction job that executes examples/scripts/predict_model.py\n\n**Workflow:**\n1. Create temp directory: /tmp/chapkit_ml_predict_XXXXX/\n2. Write config.json, model.pickle, future.csv\n3. Execute: python predict_model.py --config config.json --model model.pickle --future future.csv --output predictions.csv\n4. Read predictions.csv and store in artifact\n5. Cleanup temp directory"
                    },
                    "response": []
                },
                {
                    "name": "Poll Prediction Job",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/jobs/{{predict_job_id}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "jobs", "{{predict_job_id}}"]
                        },
                        "description": "Poll prediction job status."
                    },
                    "response": []
                },
                {
                    "name": "Get Predictions",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/artifacts/{{prediction_artifact_id}}",
                            "host": ["{{baseUrl}}"],
                            "path": [
                                "api",
                                "v1",
                                "artifacts",
                                "{{prediction_artifact_id}}"
                            ]
                        },
                        "description": "Retrieve single prediction artifact. Returns **one object** (not array). The data.predictions.data field contains the DataFrame rows (e.g., 2 rows = [[row1], [row2]]). For hierarchy view with children and config, use /$tree endpoint instead."
                    },
                    "response": [
                        {
                            "name": "Prediction Results",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/api/v1/artifacts/01JAABC999MNO901",
                                    "host": ["{{baseUrl}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "artifacts",
                                        "01JAABC999MNO901"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n  \"id\": \"01JAABC999MNO901\",\n  \"parent_id\": \"01JAABC789GHI345\",\n  \"level\": 1,\n  \"data\": {\n    \"predictions\": {\n      \"columns\": [\"rainfall\", \"mean_temperature\", \"sample_0\"],\n      \"data\": [\n        [110.0, 26.0, 13.2],\n        [90.0, 28.0, 8.5],\n        [125.0, 24.0, 16.8]\n      ]\n    },\n    \"predicted_via\": \"shell_script\",\n    \"script\": \"predict_model.py\"\n  }\n}"
                        }
                    ]
                },
                {
                    "name": "Get Artifact Tree (With Hierarchy)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}/$tree",
                            "host": ["{{baseUrl}}"],
                            "path": [
                                "api",
                                "v1",
                                "artifacts",
                                "{{model_artifact_id}}",
                                "$tree"
                            ]
                        },
                        "description": "Get full artifact tree from root model. Shows the complete hierarchy: trained model (level 0) with all predictions (level 1) as children. Includes hierarchy metadata, level labels, config, and children array."
                    },
                    "response": []
                }
            ],
            "description": "Predictions via external script execution."
        },
        {
            "name": "5. External Script Interface",
            "item": [],
            "description": "**Training Script Contract:**\n\n**Input files:**\n- {config_file} - JSON with config data\n- {data_file} - CSV with training data\n- {geo_file} - GeoJSON (optional)\n\n**Output files:**\n- {model_file} - Pickled model (must create)\n\n**Example:** examples/scripts/train_model.py\n\n**Prediction Script Contract:**\n\n**Input files:**\n- {config_file} - JSON with config data\n- {model_file} - Pickled model\n- {historic_file} - CSV with historic data (optional)\n- {future_file} - CSV with future data\n- {geo_file} - GeoJSON (optional)\n\n**Output files:**\n- {output_file} - CSV with predictions (must create)\n\n**Example:** examples/scripts/predict_model.py\n\n**Language Options:**\n- Python: sklearn, TensorFlow, PyTorch\n- R: caret, ranger, glm\n- Julia: MLJ.jl, GLM\n- CLI Tools: XGBoost, LightGBM\n- Containers: Docker, Singularity"
        },
        {
            "name": "6. Job & Artifact Management",
            "item": [
                {
                    "name": "List All Jobs",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/jobs",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "jobs"]
                        },
                        "description": "List all jobs with optional status filter."
                    },
                    "response": []
                },
                {
                    "name": "List Failed Jobs",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/jobs?status_filter=failed",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "jobs"],
                            "query": [
                                {
                                    "key": "status_filter",
                                    "value": "failed"
                                }
                            ]
                        },
                        "description": "Filter jobs by failed status to debug script errors."
                    },
                    "response": []
                },
                {
                    "name": "List All Artifacts",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/artifacts",
                            "host": ["{{baseUrl}}"],
                            "path": ["api", "v1", "artifacts"]
                        },
                        "description": "List all artifacts."
                    },
                    "response": []
                },
                {
                    "name": "Delete Artifact",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}",
                            "host": ["{{baseUrl}}"],
                            "path": [
                                "api",
                                "v1",
                                "artifacts",
                                "{{model_artifact_id}}"
                            ]
                        },
                        "description": "Delete artifact (cascades to children)."
                    },
                    "response": []
                }
            ],
            "description": "Resource management and debugging."
        },
        {
            "name": "7. Artifact Hierarchy Endpoints",
            "item": [
                {
                    "name": "Get Model Artifact Tree (Root)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}/$tree",
                            "host": ["{{baseUrl}}"],
                            "path": [
                                "api",
                                "v1",
                                "artifacts",
                                "{{model_artifact_id}}",
                                "$tree"
                            ]
                        },
                        "description": "Get model artifact tree showing full hierarchy. Includes: children array (predictions), config object (linked training config), level_label ('trained_model'), and hierarchy name."
                    },
                    "response": []
                },
                {
                    "name": "Get Model Artifact (Basic)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}",
                            "host": ["{{baseUrl}}"],
                            "path": [
                                "api",
                                "v1",
                                "artifacts",
                                "{{model_artifact_id}}"
                            ]
                        },
                        "description": "Get basic model artifact data without hierarchy. Returns: id, data, parent_id, level, created_at, updated_at. Does NOT include: children, config, level_label, hierarchy."
                    },
                    "response": []
                },
                {
                    "name": "Get Model Artifact (Expanded - With Metadata)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}/$expand",
                            "host": ["{{baseUrl}}"],
                            "path": [
                                "api",
                                "v1",
                                "artifacts",
                                "{{model_artifact_id}}",
                                "$expand"
                            ]
                        },
                        "description": "Get single artifact with hierarchy metadata (level_label, hierarchy) but without children array. Returns lighter response than /$tree - useful when you only need one node's metadata without loading the entire tree. Response includes: id, data, parent_id, level, level_label, hierarchy, created_at, updated_at. The children field is always null."
                    },
                    "response": []
                }
            ],
            "description": "Artifact endpoints showing difference between basic GET and /$tree operation."
        }
    ],
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://127.0.0.1:8000",
            "type": "string"
        },
        {
            "key": "config_id",
            "value": "",
            "type": "string"
        },
        {
            "key": "train_job_id",
            "value": "",
            "type": "string"
        },
        {
            "key": "model_artifact_id",
            "value": "",
            "type": "string"
        },
        {
            "key": "predict_job_id",
            "value": "",
            "type": "string"
        },
        {
            "key": "prediction_artifact_id",
            "value": "",
            "type": "string"
        }
    ]
}
