{
  "info": {
    "_postman_id": "01K7MONITOR1NG0000000001",
    "name": "Chapkit Monitoring - OpenTelemetry & Prometheus",
    "description": "Monitoring service demonstrating OpenTelemetry instrumentation with Prometheus metrics export.\n\n**Features:**\n- OpenTelemetry auto-instrumentation for FastAPI and SQLAlchemy\n- Prometheus metrics endpoint at /metrics\n- Operational endpoints: /health, /system\n- Config management with AppConfig schema\n\n**Quick Start:**\n```bash\npython examples/monitoring_api.py\n```\n\nService available at: http://127.0.0.1:8000",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "chapkit-monitoring"
  },
  "item": [
    {
      "name": "1. Operational Endpoints",
      "item": [
        {
          "name": "Check Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Health check endpoint - returns service and database health status."
          },
          "response": [
            {
              "name": "Healthy",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": ["{{baseUrl}}"],
                  "path": ["health"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [{"key": "Content-Type", "value": "application/json"}],
              "cookie": [],
              "body": "{\n  \"status\": \"healthy\",\n  \"checks\": {\n    \"database\": {\"state\": \"healthy\"}\n  }\n}"
            }
          ]
        },
        {
          "name": "Get System Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/system",
              "host": ["{{baseUrl}}"],
              "path": ["system"]
            },
            "description": "System information endpoint - returns platform, Python version, hostname, timezone."
          },
          "response": [
            {
              "name": "System Info",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/system",
                  "host": ["{{baseUrl}}"],
                  "path": ["system"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [{"key": "Content-Type", "value": "application/json"}],
              "cookie": [],
              "body": "{\n  \"current_time\": \"2025-10-12T17:30:00Z\",\n  \"timezone\": \"CEST\",\n  \"python_version\": \"3.13.8\",\n  \"platform\": \"macOS-26.0.1-arm64-arm-64bit-Mach-O\",\n  \"hostname\": \"macair.local\"\n}"
            }
          ]
        },
        {
          "name": "Get Prometheus Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            },
            "description": "Prometheus metrics endpoint - returns OpenTelemetry metrics in Prometheus text format.\n\nIncludes:\n- HTTP request metrics (duration, count, active requests)\n- Database connection pool metrics\n- Python runtime metrics (GC, memory, CPU)\n- SQLAlchemy query metrics"
          },
          "response": [
            {
              "name": "Metrics",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/metrics",
                  "host": ["{{baseUrl}}"],
                  "path": ["metrics"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [{"key": "Content-Type", "value": "text/plain; version=0.0.4; charset=utf-8"}],
              "cookie": [],
              "body": "# HELP python_gc_objects_collected_total Objects collected during gc\n# TYPE python_gc_objects_collected_total counter\npython_gc_objects_collected_total{generation=\"0\"} 558.0\n\n# HELP http_server_request_duration_seconds HTTP request duration\n# TYPE http_server_request_duration_seconds histogram\nhttp_server_request_duration_seconds_bucket{http_method=\"GET\",http_status_code=\"200\",le=\"0.005\"} 45.0\n\n# HELP db_client_connections_usage Number of connections currently in use\n# TYPE db_client_connections_usage gauge\ndb_client_connections_usage{pool_name=\"default\",state=\"used\"} 2.0"
            }
          ]
        },
        {
          "name": "Get Service Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/info",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "info"]
            },
            "description": "Service metadata endpoint - returns display name, version, summary, description."
          },
          "response": [
            {
              "name": "Service Metadata",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/info",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "info"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [{"key": "Content-Type", "value": "application/json"}],
              "cookie": [],
              "body": "{\n  \"display_name\": \"Monitoring Example Service\",\n  \"version\": \"1.0.0\",\n  \"summary\": \"Service with OpenTelemetry monitoring and Prometheus metrics\",\n  \"description\": \"Demonstrates automatic instrumentation of FastAPI and SQLAlchemy with metrics exposed at /metrics endpoint\"\n}"
            }
          ]
        }
      ],
      "description": "Operational endpoints for monitoring, health checks, and system info."
    },
    {
      "name": "2. Configuration Management",
      "item": [
        {
          "name": "Get Config Schema",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/configs/$schema",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "config", "$schema"]
            },
            "description": "Get Pydantic JSON schema for AppConfig."
          },
          "response": [
            {
              "name": "Config Schema",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/configs/$schema",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "config", "$schema"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [{"key": "Content-Type", "value": "application/json"}],
              "cookie": [],
              "body": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"api_key\": {\"type\": \"string\"},\n    \"max_connections\": {\"type\": \"integer\", \"default\": 10}\n  },\n  \"required\": [\"api_key\"],\n  \"title\": \"AppConfig\"\n}"
            }
          ]
        },
        {
          "name": "Create Configuration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('config_id', response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"prod_config\",\n  \"data\": {\n    \"api_key\": \"sk_prod_abc123\",\n    \"max_connections\": 20\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/configs",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "config"]
            },
            "description": "Create a new configuration with AppConfig schema validation."
          },
          "response": []
        },
        {
          "name": "List All Configs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/configs",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "config"]
            },
            "description": "List all configurations. Supports pagination with ?page=1&size=10"
          },
          "response": []
        },
        {
          "name": "Get Config by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/configs/{{config_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "config", "{{config_id}}"]
            },
            "description": "Retrieve a specific configuration by ID."
          },
          "response": []
        },
        {
          "name": "Update Config",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"updated_config\",\n  \"data\": {\n    \"api_key\": \"sk_prod_xyz789\",\n    \"max_connections\": 30\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/configs/{{config_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "config", "{{config_id}}"]
            },
            "description": "Update an existing configuration."
          },
          "response": []
        },
        {
          "name": "Delete Config",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/configs/{{config_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "config", "{{config_id}}"]
            },
            "description": "Delete a configuration."
          },
          "response": []
        }
      ],
      "description": "Configuration management endpoints with AppConfig schema validation."
    },
    {
      "name": "3. Monitoring Verification",
      "item": [
        {
          "name": "Generate Traffic (Config List)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/configs",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "config"]
            },
            "description": "Generate HTTP traffic to populate metrics. Run this multiple times, then check /metrics."
          },
          "response": []
        },
        {
          "name": "Check Metrics After Traffic",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            },
            "description": "Check metrics after generating traffic. Look for http_server_requests_total and http_server_request_duration_seconds."
          },
          "response": []
        }
      ],
      "description": "Generate traffic and verify metrics collection."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {"type": "text/javascript", "exec": [""]}
    },
    {
      "listen": "test",
      "script": {"type": "text/javascript", "exec": [""]}
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://127.0.0.1:8000",
      "type": "string"
    },
    {
      "key": "config_id",
      "value": "",
      "type": "string"
    }
  ]
}
