{
  "info": {
    "_postman_id": "01K79YAHJ7BR4E87VVTG8FNBZ1",
    "name": "Chapkit ML Basic - Disease Prediction",
    "description": "Disease prediction ML service using functional model runner with LinearRegression.\n\n**Features:**\n- Model: LinearRegression from sklearn\n- Features: rainfall, mean_temperature\n- Target: disease_cases\n- Runner: FunctionalModelRunner (functional programming style)\n- Assessment: Yellow (ready for testing)\n\n**Quick Start:**\n```bash\nfastapi dev examples/ml_basic.py\n```\n\nService available at: http://127.0.0.1:8000",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "chapkit-ml-basic"
  },
  "item": [
    {
      "name": "1. Service Health & Info",
      "item": [
        {
          "name": "Check Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "health"
              ]
            },
            "description": "Check the health status of the service and database connection."
          },
          "response": [
            {
              "name": "Healthy",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "health"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"status\": \"healthy\",\n  \"checks\": {\n    \"database\": \"healthy\"\n  }\n}"
            }
          ]
        },
        {
          "name": "View System Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/system",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "system"
              ]
            },
            "description": "Get platform and system information (Python version, OS, hostname, timezone)."
          },
          "response": [
            {
              "name": "System Info",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/system",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "system"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"current_time\": \"2025-10-11T17:30:00Z\",\n  \"timezone\": \"CEST\",\n  \"python_version\": \"3.13.8\",\n  \"platform\": \"macOS-26.0.1-arm64-arm-64bit-Mach-O\",\n  \"hostname\": \"mlaptop.local\"\n}"
            }
          ]
        },
        {
          "name": "View Service Metadata",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/info",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "info"
              ]
            },
            "description": "Get ML service metadata including author, version, assessment status, and description."
          },
          "response": [
            {
              "name": "Service Metadata",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/info",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "info"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"display_name\": \"Disease Prediction ML Service\",\n  \"version\": \"1.0.0\",\n  \"summary\": \"ML service for disease prediction using weather data\",\n  \"description\": \"Train and predict disease cases based on rainfall and temperature data using Linear Regression\",\n  \"author\": \"ML Team\",\n  \"author_assessed_status\": \"yellow\",\n  \"contact_email\": \"ml-team@example.com\"\n}"
            }
          ]
        },
        {
          "name": "Get Config Schema",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/config/$schema",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "config",
                "$schema"
              ]
            },
            "description": "Get the Pydantic JSON schema for DiseaseConfig."
          },
          "response": [
            {
              "name": "Config Schema",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/config/$schema",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "config",
                    "$schema"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"type\": \"object\",\n  \"properties\": {},\n  \"title\": \"DiseaseConfig\"\n}"
            }
          ]
        }
      ],
      "description": "Basic service health checks and metadata endpoints."
    },
    {
      "name": "2. Configuration Management",
      "item": [
        {
          "name": "Create Configuration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('config_id', response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"{{config_id}}\",\n  \"name\": \"basic_disease_model\",\n  \"data\": {}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/config",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "config"
              ]
            },
            "description": "Create a new configuration for the disease prediction model. DiseaseConfig is minimal - no extra parameters needed."
          },
          "response": [
            {
              "name": "Config Created",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMA\",\n  \"name\": \"basic_disease_model\",\n  \"data\": {}\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/config",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "config"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMA\",\n  \"name\": \"basic_disease_model\",\n  \"data\": {},\n  \"created_at\": \"2025-10-11T17:30:00Z\",\n  \"updated_at\": \"2025-10-11T17:30:00Z\"\n}"
            }
          ]
        },
        {
          "name": "List All Configs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/config",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "config"
              ]
            },
            "description": "List all configurations. Supports pagination with ?page=1&size=10"
          },
          "response": []
        },
        {
          "name": "Get Config by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/config/{{config_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "config",
                "{{config_id}}"
              ]
            },
            "description": "Retrieve a specific configuration by its ID."
          },
          "response": []
        },
        {
          "name": "Update Config",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"updated_model_config\",\n  \"data\": {}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/config/{{config_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "config",
                "{{config_id}}"
              ]
            },
            "description": "Update an existing configuration."
          },
          "response": []
        },
        {
          "name": "Delete Config",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/config/{{config_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "config",
                "{{config_id}}"
              ]
            },
            "description": "Delete a configuration."
          },
          "response": []
        }
      ],
      "description": "CRUD operations for model configurations."
    },
    {
      "name": "3. Model Training",
      "item": [
        {
          "name": "Train Model",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 202) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('train_job_id', response.job_id);",
                  "    pm.collectionVariables.set('model_artifact_id', response.model_artifact_id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"config_id\": \"{{config_id}}\",\n  \"data\": {\n    \"columns\": [\"rainfall\", \"mean_temperature\", \"disease_cases\"],\n    \"data\": [\n      [100.5, 25.3, 12],\n      [85.2, 27.1, 8],\n      [120.8, 24.5, 15],\n      [95.3, 26.2, 10],\n      [110.0, 26.0, 13],\n      [75.5, 28.0, 6],\n      [130.2, 23.8, 18],\n      [88.9, 27.5, 9]\n    ]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/ml/$train",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "ml",
                "$train"
              ]
            },
            "description": "Submit a training job with weather and disease case data. Returns immediately with job_id for polling."
          },
          "response": [
            {
              "name": "Training Submitted",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"config_id\": \"01K79YAHJ7BR4E87VVTG8FNBMA\",\n  \"data\": {\n    \"columns\": [\"rainfall\", \"mean_temperature\", \"disease_cases\"],\n    \"data\": [\n      [100.5, 25.3, 12],\n      [85.2, 27.1, 8],\n      [120.8, 24.5, 15],\n      [95.3, 26.2, 10],\n      [110.0, 26.0, 13],\n      [75.5, 28.0, 6],\n      [130.2, 23.8, 18],\n      [88.9, 27.5, 9]\n    ]\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/ml/$train",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "ml",
                    "$train"
                  ]
                }
              },
              "status": "Accepted",
              "code": 202,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"job_id\": \"01K79YAHJ7BR4E87VVTG8FNBMB\",\n  \"model_artifact_id\": \"01K79YAHJ7BR4E87VVTG8FNBMC\",\n  \"status\": \"pending\",\n  \"message\": \"Training job submitted\"\n}"
            }
          ]
        },
        {
          "name": "Poll Training Job",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/jobs/{{train_job_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "jobs",
                "{{train_job_id}}"
              ]
            },
            "description": "Poll the training job status. Poll every 1-2 seconds until status is 'completed'."
          },
          "response": [
            {
              "name": "Job Pending",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/jobs/01K79YAHJ7BR4E87VVTG8FNBMB",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "jobs",
                    "01K79YAHJ7BR4E87VVTG8FNBMB"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMB\",\n  \"status\": \"pending\",\n  \"created_at\": \"2025-10-11T17:31:00Z\"\n}"
            },
            {
              "name": "Job Completed",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/jobs/01K79YAHJ7BR4E87VVTG8FNBMB",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "jobs",
                    "01K79YAHJ7BR4E87VVTG8FNBMB"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMB\",\n  \"status\": \"completed\",\n  \"result\": \"Training completed successfully\",\n  \"created_at\": \"2025-10-11T17:31:00Z\",\n  \"updated_at\": \"2025-10-11T17:31:05Z\"\n}"
            }
          ]
        },
        {
          "name": "Get Trained Model Artifact",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "artifacts",
                "{{model_artifact_id}}"
              ]
            },
            "description": "Retrieve the trained model artifact with metadata."
          },
          "response": [
            {
              "name": "Model Artifact",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/artifacts/01K79YAHJ7BR4E87VVTG8FNBMC",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "artifacts",
                    "01K79YAHJ7BR4E87VVTG8FNBMC"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMC\",\n  \"parent_id\": null,\n  \"level\": 0,\n  \"data\": {\n    \"model_type\": \"sklearn.linear_model.LinearRegression\",\n    \"trained_at\": \"2025-10-11T17:31:05Z\"\n  },\n  \"created_at\": \"2025-10-11T17:31:00Z\",\n  \"updated_at\": \"2025-10-11T17:31:05Z\"\n}"
            }
          ]
        },
        {
          "name": "View Artifact Tree",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}/$tree",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "artifacts",
                "{{model_artifact_id}}",
                "$tree"
              ]
            },
            "description": "View the artifact tree structure with children."
          },
          "response": [
            {
              "name": "Artifact Tree",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/artifacts/01K79YAHJ7BR4E87VVTG8FNBMC/$tree",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "artifacts",
                    "01K79YAHJ7BR4E87VVTG8FNBMC",
                    "$tree"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMC\",\n  \"level\": 0,\n  \"level_label\": \"trained_model\",\n  \"data\": {...},\n  \"children\": [],\n  \"created_at\": \"2025-10-11T17:31:00Z\",\n  \"updated_at\": \"2025-10-11T17:31:05Z\"\n}"
            }
          ]
        }
      ],
      "description": "Train a model and retrieve artifacts."
    },
    {
      "name": "4. Predictions",
      "item": [
        {
          "name": "Make Predictions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 202) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('predict_job_id', response.job_id);",
                  "    pm.collectionVariables.set('prediction_artifact_id', response.prediction_artifact_id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"model_artifact_id\": \"{{model_artifact_id}}\",\n  \"future\": {\n    \"columns\": [\"rainfall\", \"mean_temperature\"],\n    \"data\": [\n      [110.0, 26.0],\n      [90.0, 28.0],\n      [125.0, 24.0],\n      [80.0, 29.0]\n    ]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/ml/$predict",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "ml",
                "$predict"
              ]
            },
            "description": "Submit a prediction job with future weather data. Returns immediately with job_id for polling."
          },
          "response": [
            {
              "name": "Prediction Submitted",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"model_artifact_id\": \"01K79YAHJ7BR4E87VVTG8FNBMC\",\n  \"future\": {\n    \"columns\": [\"rainfall\", \"mean_temperature\"],\n    \"data\": [\n      [110.0, 26.0],\n      [90.0, 28.0],\n      [125.0, 24.0],\n      [80.0, 29.0]\n    ]\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/ml/$predict",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "ml",
                    "$predict"
                  ]
                }
              },
              "status": "Accepted",
              "code": 202,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"job_id\": \"01K79YAHJ7BR4E87VVTG8FNBMD\",\n  \"prediction_artifact_id\": \"01K79YAHJ7BR4E87VVTG8FNBME\",\n  \"status\": \"pending\",\n  \"message\": \"Prediction job submitted\"\n}"
            }
          ]
        },
        {
          "name": "Poll Prediction Job",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/jobs/{{predict_job_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "jobs",
                "{{predict_job_id}}"
              ]
            },
            "description": "Poll the prediction job status. Poll every 1-2 seconds until status is 'completed'."
          },
          "response": []
        },
        {
          "name": "Get Predictions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/artifacts/{{prediction_artifact_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "artifacts",
                "{{prediction_artifact_id}}"
              ]
            },
            "description": "Retrieve single prediction artifact. Returns **one object** (not array). The data.predictions.data field contains the DataFrame rows (e.g., 2 rows = [[row1], [row2]]). For hierarchy view with children and config, use /$tree endpoint instead."
          },
          "response": [
            {
              "name": "Prediction Results",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/artifacts/01K79YAHJ7BR4E87VVTG8FNBME",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "artifacts",
                    "01K79YAHJ7BR4E87VVTG8FNBME"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBME\",\n  \"parent_id\": \"01K79YAHJ7BR4E87VVTG8FNBMC\",\n  \"level\": 1,\n  \"data\": {\n    \"predictions\": {\n      \"columns\": [\"rainfall\", \"mean_temperature\", \"sample_0\"],\n      \"data\": [\n        [110.0, 26.0, 13.2],\n        [90.0, 28.0, 8.5],\n        [125.0, 24.0, 16.8],\n        [80.0, 29.0, 6.3]\n      ]\n    }\n  },\n  \"created_at\": \"2025-10-11T17:35:00Z\",\n  \"updated_at\": \"2025-10-11T17:35:02Z\"\n}"
            }
          ]
        },
        {
          "name": "Get Artifact Tree (With Hierarchy)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}/$tree",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "artifacts",
                "{{model_artifact_id}}",
                "$tree"
              ]
            },
            "description": "Get full artifact tree from root model. Shows the complete hierarchy: trained model (level 0) with all predictions (level 1) as children. Includes hierarchy metadata, level labels, config, and children array."
          },
          "response": []
        }
      ],
      "description": "Make predictions using trained models."
    },
    {
      "name": "5. Job Management",
      "item": [
        {
          "name": "List All Jobs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/jobs",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "jobs"
              ]
            },
            "description": "List all jobs. Supports filtering: ?status_filter=completed or ?status_filter=failed"
          },
          "response": []
        },
        {
          "name": "List Completed Jobs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/jobs?status_filter=completed",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "jobs"
              ],
              "query": [
                {
                  "key": "status_filter",
                  "value": "completed"
                }
              ]
            },
            "description": "Filter jobs by status."
          },
          "response": []
        },
        {
          "name": "Cancel/Delete Job",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/jobs/{{train_job_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "jobs",
                "{{train_job_id}}"
              ]
            },
            "description": "Cancel or delete a job."
          },
          "response": []
        }
      ],
      "description": "Manage async jobs."
    },
    {
      "name": "7. Artifact Hierarchy Endpoints",
      "item": [
        {
          "name": "Get Model Artifact Tree (Root)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}/$tree",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "artifacts",
                "{{model_artifact_id}}",
                "$tree"
              ]
            },
            "description": "Get model artifact tree showing full hierarchy. Includes: children array (predictions), config object (linked training config), level_label ('trained_model'), and hierarchy name."
          },
          "response": []
        },
        {
          "name": "Get Model Artifact (Basic)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "artifacts",
                "{{model_artifact_id}}"
              ]
            },
            "description": "Get basic model artifact data without hierarchy. Returns: id, data, parent_id, level, created_at, updated_at. Does NOT include: children, config, level_label, hierarchy."
          },
          "response": []
        },
        {
          "name": "Get Model Artifact (Expanded - With Metadata)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}/$expand",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "artifacts",
                "{{model_artifact_id}}",
                "$expand"
              ]
            },
            "description": "Get single artifact with hierarchy metadata (level_label, hierarchy) but without children array. Returns lighter response than /$tree - useful when you only need one node's metadata without loading the entire tree. Response includes: id, data, parent_id, level, level_label, hierarchy, created_at, updated_at. The children field is always null."
          },
          "response": []
        }
      ],
      "description": "Artifact endpoints showing difference between basic GET and /$tree operation."
    },
    {
      "name": "6. Artifact Management",
      "item": [
        {
          "name": "List All Artifacts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/artifacts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "artifacts"
              ]
            },
            "description": "List all artifacts. Supports pagination: ?page=1&size=20"
          },
          "response": []
        },
        {
          "name": "Delete Artifact",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/artifacts/{{model_artifact_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "artifacts",
                "{{model_artifact_id}}"
              ]
            },
            "description": "Delete an artifact (cascades to children)."
          },
          "response": []
        }
      ],
      "description": "Manage artifacts."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://127.0.0.1:8000",
      "type": "string"
    },
    {
      "key": "config_id",
      "value": "01K79YAHJ7BR4E87VVTG8FNBMA",
      "type": "string"
    },
    {
      "key": "train_job_id",
      "value": "01K79YAHJ7BR4E87VVTG8FNBMB",
      "type": "string"
    },
    {
      "key": "model_artifact_id",
      "value": "01K79YAHJ7BR4E87VVTG8FNBMC",
      "type": "string"
    },
    {
      "key": "predict_job_id",
      "value": "01K79YAHJ7BR4E87VVTG8FNBMD",
      "type": "string"
    },
    {
      "key": "prediction_artifact_id",
      "value": "01K79YAHJ7BR4E87VVTG8FNBME",
      "type": "string"
    }
  ]
}