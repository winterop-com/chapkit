{
	"info": {
		"_postman_id": "01K79YAHJ7BR4E87VVTG8FNBMA",
		"name": "Chapkit Auth Basic - API Key Authentication",
		"description": "Complete workflow for testing API key authentication with config service.\n\nThis collection demonstrates:\n- Health checks without authentication\n- Authentication failures (missing/invalid keys)\n- Successful authenticated CRUD operations\n- Key rotation patterns\n\nBefore running:\n1. Start service: `export CHAPKIT_API_KEYS=\"sk_dev_abc123,sk_dev_xyz789\" && fastapi dev examples/auth_basic.py`\n2. Service runs at: http://127.0.0.1:8000\n3. Collection auto-captures IDs (config_id) to variables\n\nEnvironment variables used:\n- baseUrl: Service URL (default: http://127.0.0.1:8000)\n- api_key: Valid API key (default: sk_dev_abc123)\n- config_id: Auto-captured from create request",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "1. Service Health & Info",
			"item": [
				{
					"name": "Check Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"health"
							]
						},
						"description": "Health check endpoint - no authentication required"
					},
					"response": [
						{
							"name": "Check Service Health",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/health",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"healthy\",\n  \"checks\": {\n    \"database\": \"healthy\"\n  }\n}"
						}
					]
				},
				{
					"name": "Get OpenAPI Schema",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/openapi.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"openapi.json"
							]
						},
						"description": "OpenAPI schema endpoint - no authentication required"
					},
					"response": []
				}
			],
			"description": "Endpoints that don't require authentication"
		},
		{
			"name": "2. Authentication Failures",
			"item": [
				{
					"name": "Access Config Without Auth (Fails)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response follows RFC 9457 Problem Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('detail');",
									"    pm.expect(jsonData).to.have.property('instance');",
									"});",
									"",
									"pm.test(\"Error type is unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.type).to.eql('urn:chapkit:error:unauthorized');",
									"});",
									"",
									"pm.test(\"Error mentions missing header\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.include('Missing authentication header');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/configs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"config"
							]
						},
						"description": "Attempt to access protected endpoint without API key - should fail with 401"
					},
					"response": [
						{
							"name": "Access Config Without Auth (Fails)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/configs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"config"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"urn:chapkit:error:unauthorized\",\n  \"title\": \"Unauthorized\",\n  \"status\": 401,\n  \"detail\": \"Missing authentication header: X-API-Key\",\n  \"instance\": \"/api/v1/configs\"\n}"
						}
					]
				},
				{
					"name": "Access Config With Invalid Key (Fails)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error type is unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.type).to.eql('urn:chapkit:error:unauthorized');",
									"});",
									"",
									"pm.test(\"Error mentions invalid key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.include('Invalid API key');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "sk_dev_invalid_key",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/configs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"config"
							]
						},
						"description": "Attempt to access protected endpoint with invalid API key - should fail with 401"
					},
					"response": [
						{
							"name": "Access Config With Invalid Key (Fails)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "sk_dev_invalid_key",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/configs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"config"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/problem+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"urn:chapkit:error:unauthorized\",\n  \"title\": \"Unauthorized\",\n  \"status\": 401,\n  \"detail\": \"Invalid API key\",\n  \"instance\": \"/api/v1/configs\"\n}"
						}
					]
				}
			],
			"description": "Examples of authentication failures"
		},
		{
			"name": "3. Configuration Management (Authenticated)",
			"item": [
				{
					"name": "List All Configs (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/configs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"config"
							]
						},
						"description": "List all configs with valid authentication"
					},
					"response": [
						{
							"name": "List All Configs (Empty)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/configs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"config"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "Get Config Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has schema structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('properties');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/configs/$schema",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"config",
								"$schema"
							]
						},
						"description": "Get Pydantic JSON schema for config data structure"
					},
					"response": [
						{
							"name": "Get Config Schema",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/configs/$schema",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"config",
										"$schema"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"environment\": {\n      \"type\": \"string\",\n      \"title\": \"Environment\"\n    },\n    \"debug\": {\n      \"default\": false,\n      \"type\": \"boolean\",\n      \"title\": \"Debug\"\n    }\n  },\n  \"required\": [\"environment\"],\n  \"title\": \"AppConfig\"\n}"
						}
					]
				},
				{
					"name": "Create Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has config fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('created_at');",
									"    pm.expect(jsonData).to.have.property('updated_at');",
									"});",
									"",
									"// Auto-capture config_id for subsequent requests",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set('config_id', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMA\",\n  \"name\": \"production_config\",\n  \"data\": {\n    \"environment\": \"production\",\n    \"debug\": false\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/configs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"config"
							]
						},
						"description": "Create a new configuration with authentication"
					},
					"response": [
						{
							"name": "Create Configuration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMA\",\n  \"name\": \"production_config\",\n  \"data\": {\n    \"environment\": \"production\",\n    \"debug\": false\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/configs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"config"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMA\",\n  \"name\": \"production_config\",\n  \"data\": {\n    \"environment\": \"production\",\n    \"debug\": false\n  },\n  \"created_at\": \"2025-10-12T12:00:00Z\",\n  \"updated_at\": \"2025-10-12T12:00:00Z\"\n}"
						}
					]
				},
				{
					"name": "Get Config By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response matches created config\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('production_config');",
									"    pm.expect(jsonData.data.environment).to.eql('production');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/configs/{{config_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"config",
								"{{config_id}}"
							]
						},
						"description": "Get config by ID using auto-captured config_id variable"
					},
					"response": [
						{
							"name": "Get Config By ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/configs/01K79YAHJ7BR4E87VVTG8FNBMA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"config",
										"01K79YAHJ7BR4E87VVTG8FNBMA"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMA\",\n  \"name\": \"production_config\",\n  \"data\": {\n    \"environment\": \"production\",\n    \"debug\": false\n  },\n  \"created_at\": \"2025-10-12T12:00:00Z\",\n  \"updated_at\": \"2025-10-12T12:00:00Z\"\n}"
						}
					]
				},
				{
					"name": "Update Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Config was updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('production_config_v2');",
									"    pm.expect(jsonData.data.debug).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"production_config_v2\",\n  \"data\": {\n    \"environment\": \"production\",\n    \"debug\": true\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/configs/{{config_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"config",
								"{{config_id}}"
							]
						},
						"description": "Update existing configuration"
					},
					"response": [
						{
							"name": "Update Configuration",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"production_config_v2\",\n  \"data\": {\n    \"environment\": \"production\",\n    \"debug\": true\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/configs/01K79YAHJ7BR4E87VVTG8FNBMA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"config",
										"01K79YAHJ7BR4E87VVTG8FNBMA"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMA\",\n  \"name\": \"production_config_v2\",\n  \"data\": {\n    \"environment\": \"production\",\n    \"debug\": true\n  },\n  \"created_at\": \"2025-10-12T12:00:00Z\",\n  \"updated_at\": \"2025-10-12T12:05:00Z\"\n}"
						}
					]
				},
				{
					"name": "List All Configs (With Data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains configs\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/configs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"config"
							]
						},
						"description": "List all configs after creating one"
					},
					"response": [
						{
							"name": "List All Configs (With Data)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/configs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"config"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"01K79YAHJ7BR4E87VVTG8FNBMA\",\n    \"name\": \"production_config_v2\",\n    \"data\": {\n      \"environment\": \"production\",\n      \"debug\": true\n    },\n    \"created_at\": \"2025-10-12T12:00:00Z\",\n    \"updated_at\": \"2025-10-12T12:05:00Z\"\n  }\n]"
						}
					]
				},
				{
					"name": "Delete Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/configs/{{config_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"config",
								"{{config_id}}"
							]
						},
						"description": "Delete configuration"
					},
					"response": [
						{
							"name": "Delete Configuration",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/configs/01K79YAHJ7BR4E87VVTG8FNBMA",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"config",
										"01K79YAHJ7BR4E87VVTG8FNBMA"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "CRUD operations on config endpoint with valid authentication"
		},
		{
			"name": "4. Key Rotation",
			"item": [
				{
					"name": "Access With First Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "sk_dev_abc123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/configs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"config"
							]
						},
						"description": "Access config with first API key from CHAPKIT_API_KEYS"
					},
					"response": [
						{
							"name": "Access With First Key",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "sk_dev_abc123",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/configs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"config"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "Access With Second Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "sk_dev_xyz789",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/configs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"config"
							]
						},
						"description": "Access config with second API key from CHAPKIT_API_KEYS"
					},
					"response": [
						{
							"name": "Access With Second Key",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "sk_dev_xyz789",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/configs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"config"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				}
			],
			"description": "Demonstrates zero-downtime key rotation with multiple valid keys"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		},
		{
			"key": "api_key",
			"value": "sk_dev_abc123",
			"type": "string"
		},
		{
			"key": "config_id",
			"value": "01K79YAHJ7BR4E87VVTG8FNBMA",
			"type": "string"
		}
	]
}
