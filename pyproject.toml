[tool.uv.workspace]
members = ["packages/servicekit", "packages/chapkit"]

[tool.ruff]
target-version = "py313"
line-length = 120

[tool.ruff.lint]
fixable = ["ALL"]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "D",   # pydocstyle (docstring checking)
]
ignore = [
    "D203",  # one-blank-line-before-class (conflicts with D211)
    "D213",  # multi-line-summary-second-line (conflicts with D212)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
# Tests don't need docstrings
"tests/**/*.py" = ["D"]
# Alembic migrations are autogenerated
"alembic/**/*.py" = ["D"]
# Allow missing docstrings in __init__ files if they're just exports
"**/__init__.py" = ["D104"]
# Internal source - allow some missing docstrings for now
"packages/*/src/**/*.py" = [
    "D102",  # Missing docstring in public method (TODO: fix gradually)
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__ (TODO: fix gradually)
]
# Examples must have all docstrings (strictest enforcement)
"examples/**/*.py" = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["packages/servicekit/tests", "packages/chapkit/tests", "tests"]
norecursedirs = ["examples", ".git", ".venv", "__pycache__"]
filterwarnings = [
    "ignore:Pydantic serializer warnings:UserWarning",
    "ignore:Remove.*format_exc_info.*:UserWarning",
]

[tool.coverage.run]
branch = true
dynamic_context = "test_function"
relative_files = true
source = ["servicekit", "chapkit"]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
]
precision = 2
show_missing = true
skip_covered = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
warn_unused_ignores = true
strict_equality = true
mypy_path = ["packages/servicekit/src", "packages/chapkit/src", "typings"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pyright]
include = ["packages/*/src", "packages/*/tests", "examples", "alembic"]
pythonVersion = "3.13"
typeCheckingMode = "strict"
diagnosticMode = "workspace"
useLibraryCodeForTypes = true
reportPrivateUsage = false  # Tests need to access protected members
reportUnusedFunction = false  # Decorated functions (pytest fixtures, routes) flagged incorrectly
reportUnusedTypeParameters = true  # Catch unused type parameters in generic classes
reportUnknownMemberType = false  # Third-party libraries (pandas) have incomplete stubs
reportUnknownArgumentType = false  # Related to third-party stub issues
reportUnknownParameterType = false  # Test helpers don't need full annotations
reportUnknownVariableType = false  # Related to third-party stub issues
reportMissingTypeArgument = false  # Allow dict without type args in tests
reportMissingTypeStubs = false  # Third-party libraries (OpenTelemetry) missing stubs
